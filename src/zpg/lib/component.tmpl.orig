#for $i in $imports
$i
#end for

#if isinstance($class, basestring)
class ${title}($class):
#else
class ${title}(#echo ', '.join($class)#):
#end if
#if not $Device
    meta_type = portal_type = '${unique_name}'
#end if
#for $attr in $attributes
#if isinstance($attr.default, basestring)
    $attr.id = "$attr.default"
#elif $attr.default is None 
    $attr.id = None
#else
    $attr.id = $attr.default
#end if
#end for

#if len($attributes)>0
    _properties = ManagedEntity._properties + (
#for $attr in $attributes
        {'id': '$attr.id', 'type': '$attr.type'},
#end for
        )
#end if

#if len($relations)>0
    _relations = ManagedEntity._relations + (
#for $rel in $relations
        $rel
#end for
    )
#end if

    factory_type_information = ({
        'actions': ({
            'id': 'perfConf',
            'name': 'Template',
            'action': 'objTemplates',
            'permissions': (ZEN_CHANGE_DEVICE,),
            },),
        },)

#if not $Device
    def device(self):
        '''
        Return device under which this component/device is contained.
        '''
        obj = self

        for i in range(200):
            if isinstance(obj, Device):
                return obj

            try:
                obj = obj.getPrimaryParent()
            except AttributeError as exc:
                raise AttributeError(
                    'Unable to determine parent at %s (%s) '
                    'while getting device for %s' % (
                        obj, exc, self))
#end if

#if $Device
#set $ctype = 'Device'
#else 
#set $ctype = 'Component'
#end if
class I${title}Info(I${ctype}Info):
#if not $Device
#if len($count_rels)>0
#for $rel in $count_rels
#set $FNAME_rel = " ".join($rel[0].split('_'))
    ${rel[0]}_count = schema.Int(title=_t(u'Number of ${FNAME_rel}))
#end for
#end if
#end if
#if len($attributes)>0
#for $attr in $attributes
#if $attr.type == 'string'
    $attr.id = schema.TextLine(title=_t(u'$attr.Names'))
#end if
#if $attr.type == 'int'
    $attr.id = schema.Int(title=_t(u'$attr.Names'))
#end if
#end for
#else
    pass
#end if

class ${title}Info(${ctype}Info):
    implements(I${title}Info)

#if not $Device
#if len($count_rels)>0

#for $rel in $count_rels
    @property
    def ${rel[0]}_count(self):
        # Using countObjects is fast.
        try:
            return self._object.${rel[0]}.countObjects()
        except:
            # Using len on the results of calling the relationship is slow.
            return len(self._object.${rel[0]}())
   
#end for
#end if
#end if

#if len($attributes)>0
#for $attr in $attributes
#if $attr.DetailDisplay == True
    $attr.id = ProxyProperty('$attr.id')
#end if
#end for
#else
    pass
#end if
#if $varExists('custom_path')
#if $custom_path['M-M'] or $custom_path['1-M']
class ${title}PathReporter(DefaultPathReporter):
    paths = super(${title}PathReporter, self).getPaths()
    
#for $path in $custom_path['M-M']
    for obj in self.context.${path[0]}():
        paths.extend(relPath(obj,'${path[1]}'))

#end for
#for $path in $custom_path['1-M']
    obj = self.context.${path[0]}()
    if obj:
        paths.extend(relPath(obj,'${path[1]}'))

#end for
    return paths
#end if
#end if
