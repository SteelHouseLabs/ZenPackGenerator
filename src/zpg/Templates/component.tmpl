$zenpack.license.header
#for $i in $imports
$i
#end for

class ${shortklass}(#echo ', '.join($klassNames)#):
    meta_type = portal_type = '$portal_type'

#if $properties or $relations
    Klasses = [#echo ', '.join($klassNames)#]

#end if
## Add _properties
#if $properties
#for $key in $properties
#set $p=$properties[key]
    $p.id = $p.value
#end for

    for Klass in Klasses:
        _properties = _properties + getattr(Klass,'_properties', None)

    _properties = _properties + (
#for $key in $properties
#set $p=$properties[key]
        {'id': '$p.id', 'type': '$p.Type', 'mode': '$p.mode'},
#end for
        )

#end if
## Add _relations
#if $relations
    for Klass in Klasses:
        _relations = _relations + getattr(Klass, '_relations', None)

    _relations = _relations + (
#for $rel in $relationstoArrayofStrings()
        $rel
#end for
        )

#end if
    factory_type_information = ({
        'actions': ({
            'id': 'perfConf',
            'name': 'Template',
            'action': 'objTemplates',
            'permissions': (ZEN_CHANGE_DEVICE,),
            },),
        },)

##  # Query for events by id instead of name.
##    event_key = "ComponentId"
##
##    def getIconPath(self):
##        return '/++resource++cloudstack/img/cloudstack.png'
##
    def device(self):
        '''
        Return device under which this component/device is contained.
        '''
        obj = self

        for i in range(200):
            if isinstance(obj, Device):
                return obj

            try:
                obj = obj.getPrimaryParent()
            except AttributeError as exc:
                raise AttributeError(
                    'Unable to determine parent at %s (%s) '
                    'while getting device for %s' % (
                        obj, exc, self))

#if $displayInfo
class I${shortklass}Info(I${Type}Info):
#if $ManyRelationships
#for $rel in $ManyRelationships
    ${rel.components[1].relname}_count = schema.Int(title=_t(u'Number of ${rel.components[1].names}))
#end for
#end if
#if $properties.values()

#for $prop in $properties.values()
    $prop.id = schema.${prop.Schema}(title=_t(u'$prop.names'))
#end for

#end if
#end if
#if $displayIInfo
class ${shortklass}Info(${Type}Info):
    implements(I${shortklass}Info)
#if $properties.values()

#for $prop in $properties.values()
#if $prop.detailDisplay
    $prop.id = ProxyProperty('${prop.id}')
#end if
#end for

#end if
## COMPONENT COUNTS
#if $ManyRelationships

#for $rel in $ManyRelationships
    @property
    def ${rel.components[1].relname}_count:
        # Using countObjects is fast.
        try:
            return self._object.${rel.components[1].relnames}.countObjects()
        except:
            # Using len on the results of calling the relationship is slow.
            return len(self._object.${rel.components[1].relnames}())

#end for
#end if
#end if
##CUSTOM PATHS REPORTERS
#if $custompaths
class ${shortklass}PathReporter(DefaultPathReporter):
    paths = super(${shortklass}PathReporter, self).getPaths()

#if '1-M' in $custompaths.keys()
#for $path in $custompaths['1-M']
    obj = self.context.${path[0].relname}()
    if obj:
        paths.extend(relPath(obj,'${path[1].relname}'))

#end for
#end if
#if 'M-M' in $custompaths.keys()
#for $path in $custompaths['M-M']
    for obj in self.context.${path[0].relnames}()
        paths.extend(relPath(obj,'${path[1].relnames}'))

#end for
#end if
   return paths
#end if